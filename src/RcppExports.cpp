// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// intersect_ellipses
arma::vec intersect_ellipses(const arma::vec& par, const bool circle);
RcppExport SEXP _eulerr_intersect_ellipses(SEXP parSEXP, SEXP circleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const bool >::type circle(circleSEXP);
    rcpp_result_gen = Rcpp::wrap(intersect_ellipses(par, circle));
    return rcpp_result_gen;
END_RCPP
}
// stress
double stress(const arma::vec& orig, const arma::vec& fit);
RcppExport SEXP _eulerr_stress(SEXP origSEXP, SEXP fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type orig(origSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type fit(fitSEXP);
    rcpp_result_gen = Rcpp::wrap(stress(orig, fit));
    return rcpp_result_gen;
END_RCPP
}
// optim_final_loss
double optim_final_loss(const arma::vec& par, const arma::vec& areas, const bool circle);
RcppExport SEXP _eulerr_optim_final_loss(SEXP parSEXP, SEXP areasSEXP, SEXP circleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< const bool >::type circle(circleSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_final_loss(par, areas, circle));
    return rcpp_result_gen;
END_RCPP
}
// optim_init
Rcpp::NumericVector optim_init(const Rcpp::NumericVector& par, const Rcpp::NumericMatrix& d, const Rcpp::LogicalMatrix& disjoint, const Rcpp::LogicalMatrix& subset);
RcppExport SEXP _eulerr_optim_init(SEXP parSEXP, SEXP dSEXP, SEXP disjointSEXP, SEXP subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix& >::type disjoint(disjointSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix& >::type subset(subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_init(par, d, disjoint, subset));
    return rcpp_result_gen;
END_RCPP
}
// locate_centers
arma::mat locate_centers(const arma::rowvec& h, const arma::rowvec& k, const arma::rowvec& a, const arma::rowvec& b, const arma::rowvec& phi, const arma::colvec& fitted);
RcppExport SEXP _eulerr_locate_centers(SEXP hSEXP, SEXP kSEXP, SEXP aSEXP, SEXP bSEXP, SEXP phiSEXP, SEXP fittedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type fitted(fittedSEXP);
    rcpp_result_gen = Rcpp::wrap(locate_centers(h, k, a, b, phi, fitted));
    return rcpp_result_gen;
END_RCPP
}
// choose_two
arma::umat choose_two(const arma::uvec& x);
RcppExport SEXP _eulerr_choose_two(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_two(x));
    return rcpp_result_gen;
END_RCPP
}
// discdisc
double discdisc(double d, double r1, double r2, double overlap);
RcppExport SEXP _eulerr_discdisc(SEXP dSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    rcpp_result_gen = Rcpp::wrap(discdisc(d, r1, r2, overlap));
    return rcpp_result_gen;
END_RCPP
}
// bit_index_cpp
arma::umat bit_index_cpp(arma::uword n);
RcppExport SEXP _eulerr_bit_index_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(bit_index_cpp(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_eulerr_intersect_ellipses", (DL_FUNC) &_eulerr_intersect_ellipses, 2},
    {"_eulerr_stress", (DL_FUNC) &_eulerr_stress, 2},
    {"_eulerr_optim_final_loss", (DL_FUNC) &_eulerr_optim_final_loss, 3},
    {"_eulerr_optim_init", (DL_FUNC) &_eulerr_optim_init, 4},
    {"_eulerr_locate_centers", (DL_FUNC) &_eulerr_locate_centers, 6},
    {"_eulerr_choose_two", (DL_FUNC) &_eulerr_choose_two, 1},
    {"_eulerr_discdisc", (DL_FUNC) &_eulerr_discdisc, 4},
    {"_eulerr_bit_index_cpp", (DL_FUNC) &_eulerr_bit_index_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_eulerr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
